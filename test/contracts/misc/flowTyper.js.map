{
  "version": 3,
  "sources": ["../../../frontend/model/contracts/misc/flowTyper.js"],
  "sourcesContent": ["// to make rollup happy, I copied flowTyper-js\n// library into this file (it was refusing to\n// import because of the way functions were being\n// exported).\n//\n// GI EDIT NOTES:\n//\n// - The following functions can be used directly with 'validate'\n//   because they've had their '_scope' second parameter removed:\n//   - arrayOf\n//   - mapOf\n//   - object\n//   - objectOf\n//   - objectMaybeOf (this is a custom function that didn't exist in flowTyper)\n//\n// TODO: remove this file from eslintIgnore in package.json and fix errors\n\n                                             \n                                           \n                                                \n                                                      \n                                                       \n                                                            \n                                                 \n\n                                \n                   \n                  \n \n\n                                   \n                   \n                   \n                  \n \n\n                                      \n                   \n                   \n                   \n                   \n \n\n                                         \n                   \n                   \n                   \n                   \n                  \n \n\nexport const EMPTY_VALUE = Symbol('@@empty')\nexport const isEmpty = v => v === EMPTY_VALUE\nexport const isNil = v => v === null\nexport const isUndef = v => typeof v === 'undefined'\nexport const isBoolean = v => typeof v === 'boolean'\nexport const isNumber = v => typeof v === 'number'\nexport const isString = v => typeof v === 'string'\nexport const isObject = v => !isNil(v) && typeof v === 'object'\nexport const isFunction = v => typeof v === 'function'\n\nexport const isType = typeFn => (v, _scope = '') => {\n  try {\n    typeFn(v, _scope)\n    return true\n  } catch (_) {\n    return false\n  }\n}\n\n// This function will return value based on schema with inferred types. This\n// value can be used to define type in Flow with 'typeof' utility.\nexport const typeOf = schema => schema(EMPTY_VALUE, '')\nexport const getType = (typeFn, _options) => {\n  if (isFunction(typeFn.type)) return typeFn.type(_options)\n  return typeFn.name || '?'\n}\n\n// error\nexport class TypeValidatorError extends Error {\n  expectedType        \n  valueType        \n  value        \n  typeScope        \n  sourceFile        \n\n  constructor (\n    message         ,\n    expectedType        ,\n    valueType        ,\n    value        ,\n    typeName         = '',\n    typeScope          = ''\n  ) {\n    const errMessage = message ||\n      `invalid \"${valueType}\" value type; ${typeName || expectedType} type expected`\n    super(errMessage)\n    this.expectedType = expectedType\n    this.valueType = valueType\n    this.value = value\n    this.typeScope = typeScope || ''\n    this.sourceFile = this.getSourceFile()\n    this.message = `${errMessage}\\n${this.getErrorInfo()}`\n    this.name = this.constructor.name\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, TypeValidatorError)\n    }\n  }\n\n  getSourceFile ()         {\n    const fileNames = this.stack.match(/(\\/[\\w_\\-.]+)+(\\.\\w+:\\d+:\\d+)/g) || []\n    return fileNames.find(fileName => fileName.indexOf('/flowTyper-js/dist/') === -1) || ''\n  }\n\n  getErrorInfo ()         {\n    return `\n    file     ${this.sourceFile}\n    scope    ${this.typeScope}\n    expected ${this.expectedType.replace(/\\n/g, '')}\n    type     ${this.valueType}\n    value    ${this.value}\n`\n  }\n}\n\n// TypeValidatorError.prototype.name = 'TypeValidatorError'\n// exports.TypeValidatorError = TypeValidatorError\n\nconst validatorError =    (\n  typeFn                  ,\n  value       ,\n  scope         ,\n  message         ,\n  expectedType         ,\n  valueType         \n)                     => {\n  return new TypeValidatorError(\n    message,\n    expectedType || getType(typeFn),\n    valueType || typeof value,\n    JSON.stringify(value),\n    typeFn.name,\n    scope\n  )\n}\n\nexport const arrayOf =\n     (typeFn                  , _scope          = 'Array')                        => {\n    function array (value) {\n      if (isEmpty(value)) return [typeFn(value)]\n      if (Array.isArray(value)) {\n        let index = 0\n        return value.map(v => typeFn(v, `${_scope}[${index++}]`))\n      }\n      throw validatorError(array, value, _scope)\n    }\n    array.type = () => `Array<${getType(typeFn)}>`\n    return array\n  }\n\nexport const literalOf =\n                   (primitive   )                   => {\n    function literal (value, _scope = '') {\n      if (isEmpty(value) || (value === primitive)) return primitive\n      throw validatorError(literal, value, _scope)\n    }\n    literal.type = () => {\n      if (isBoolean(primitive)) return `${primitive ? 'true' : 'false'}`\n      else return `\"${primitive}\"`\n    }\n    return literal\n  }\n\nexport const mapOf =       (\n  keyTypeFn                  ,\n  typeFn                  \n)                            => {\n  function mapOf (value) {\n    if (isEmpty(value)) return {}\n    const o = object(value)\n    const reducer = (acc, key) =>\n      Object.assign(\n        acc,\n        {\n          // $FlowFixMe\n          [keyTypeFn(key, 'Map[_]')]: typeFn(o[key], `Map.${key}`)\n        }\n      )\n    return Object.keys(o).reduce(reducer, {})\n  }\n  mapOf.type = () => `{ [_:${getType(keyTypeFn)}]: ${getType(typeFn)} }`\n  return mapOf\n}\n\nconst isPrimitiveFn = (typeName) =>\n  ['undefined', 'null', 'boolean', 'number', 'string'].includes(typeName)\n\nexport const maybe =\n     (typeFn                  )                        => {\n    function maybe (value, _scope = '') {\n      return (isNil(value) || isUndef(value)) ? value : typeFn(value, _scope)\n    }\n    maybe.type = () => !isPrimitiveFn(typeFn.name) ? `?(${getType(typeFn)})` : `?${getType(typeFn)}`\n    return maybe\n  }\n\nexport const mixed = (\n  function mixed (value) {\n    return value\n  }                  \n)\n\nexport const object = (\n  function (value) {\n    if (isEmpty(value)) return {}\n    if (isObject(value) && !Array.isArray(value)) {\n      return Object.assign({}, value)\n    }\n    throw validatorError(object, value)\n  }                                    \n)\n\nexport const objectOf =                            \n  (typeObj   , _scope          = 'Object')                                                        => {\n  function object2 (value) {\n    const o = object(value)\n    const typeAttrs = Object.keys(typeObj)\n    const unknownAttr = Object.keys(o).find(attr => !typeAttrs.includes(attr))\n    if (unknownAttr) {\n      throw validatorError(\n        object2,\n        value,\n        _scope,\n        `missing object property '${unknownAttr}' in ${_scope} type`\n      )\n    }\n    const undefAttr = typeAttrs.find(property => {\n      const propertyTypeFn = typeObj[property]\n      return (propertyTypeFn.name === 'maybe' && !o.hasOwnProperty(property))\n    })\n    if (undefAttr) {\n      throw validatorError(\n        object2,\n        o[undefAttr],\n        `${_scope}.${undefAttr}`,\n        `empty object property '${undefAttr}' for ${_scope} type`,\n        `void | null | ${getType(typeObj[undefAttr]).substr(1)}`,\n        '-'\n      )\n    }\n\n    const reducer = isEmpty(value)\n      ? (acc, key) => Object.assign(acc, { [key]: typeObj[key](value) })\n      : (acc, key) => {\n        const typeFn = typeObj[key]\n        if (typeFn.name === 'optional' && !o.hasOwnProperty(key)) {\n          return Object.assign(acc, {})\n        } else {\n          return Object.assign(acc, { [key]: typeFn(o[key], `${_scope}.${key}`) })\n        }\n      }\n    return typeAttrs.reduce(reducer, {})\n  }\n  object2.type = () => {\n    const props = Object.keys(typeObj).map(\n      (key) => typeObj[key].name === 'optional'\n        ? `${key}?: ${getType(typeObj[key], { noVoid: true })}`\n        : `${key}: ${getType(typeObj[key])}`\n    )\n    return `{|\\n ${props.join(',\\n  ')} \\n|}`\n  }\n  return object2\n}\n\n// TODO: add flow type annotations and make it use validatorError etc.\nexport function objectMaybeOf (validations        , _scope          = 'Object')         {\n  return function (data     ) {\n    object(data)\n    for (const key in data) {\n      validations[key]?.(data[key], `${_scope}.${key}`)\n    }\n    return data\n  }\n}\n\nexport const optional =\n     (typeFn                  )                          => {\n    const unionFn = unionOf(typeFn, undef)\n    function optional (v) {\n      return unionFn(v)\n    }\n    optional.type = ({ noVoid }) => !noVoid ? getType(unionFn) : getType(typeFn)\n    return optional\n  }\n\nexport const nil = (\n  function nil (value) {\n    if (isEmpty(value) || isNil(value)) return null\n    throw validatorError(nil, value)\n  }\n                       \n)\n\nexport function undef (value, _scope = '') {\n  if (isEmpty(value) || isUndef(value)) return undefined\n  throw validatorError(undef, value, _scope)\n}\nundef.type = () => 'void'\n// export const undef = (undef: TypeValidator<void>)\n\nexport const boolean = (\n  function boolean (value, _scope = '') {\n    if (isEmpty(value)) return false\n    if (isBoolean(value)) return value\n    throw validatorError(boolean, value, _scope)\n  }\n                          \n)\n\nexport const number = (\n  function number (value, _scope = '') {\n    if (isEmpty(value)) return 0\n    if (isNumber(value)) return value\n    throw validatorError(number, value, _scope)\n  }\n                         \n)\n\nexport const string = (\n  function string (value, _scope = '') {\n    if (isEmpty(value)) return ''\n    if (isString(value)) return value\n    throw validatorError(string, value, _scope)\n  }\n                         \n)\n\n                            \n             \n                                     \n                                                 \n                                                             \n                                                                         \n                                                                                     \n                                                                                                 \n                                                                                                             \n                                                                                                                         \n                                                                                                                                     \n                                                                                                                                                 \n\nfunction tupleOf_ (...typeFuncs) {\n  function tuple (value       , _scope = '') {\n    const cardinality = typeFuncs.length\n    if (isEmpty(value)) return typeFuncs.map(fn => fn(value))\n    if (Array.isArray(value) && value.length === cardinality) {\n      const tupleValue = []\n      for (let i = 0; i < cardinality; i += 1) {\n        tupleValue.push(typeFuncs[i](value[i], _scope))\n      }\n      return tupleValue\n    }\n    throw validatorError(tuple, value, _scope)\n  }\n  tuple.type = () => `[${typeFuncs.map(fn => getType(fn)).join(', ')}]`\n  return tuple\n}\n\n// $FlowFixMe - $Tuple<(A, B, C, ...)[]>\n// const tupleOf: TupleT = tupleOf_\nexport const tupleOf = tupleOf_\n\n             \n                                   \n                                                \n                                                             \n                                                                          \n                                                                                       \n                                                                                                    \n                                                                                                                 \n                                                                                                                              \n                                                                                                                                           \n                                                                                                                                                        \n\nfunction unionOf_ (...typeFuncs) {\n  function union (value       , _scope = '') {\n    for (const typeFn of typeFuncs) {\n      try {\n        return typeFn(value, _scope)\n      } catch (_) {}\n    }\n    throw validatorError(union, value, _scope)\n  }\n  union.type = () => `(${typeFuncs.map(fn => getType(fn)).join(' | ')})`\n  return union\n}\n// $FlowFixMe\n// const unionOf: UnionT = (unionOf_)\nexport const unionOf = unionOf_\n"],
  "mappings": "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",
  "names": []
}
